{"function":"StoreFastElementStub", "source":"",
"phases":[{"name":"Machine","type":"graph","data":{
"nodes":[{"id":7,"label":"End","title":"End","live": true,"properties":"NoRead, NoWrite, NoThrow, NoDeopt","opcode":"End","control":true,"opinfo":"0 v 0 eff 0 ctrl in, 0 v 0 eff 0 ctrl out"}
],
"edges":[
]}},
{"name":"Schedule","type":"schedule","data":"--- BLOCK B0 ---\n  1: Parameter[0](0)\n  2: Parameter[1](0)\n  3: Parameter[2](0)\n  4: Parameter[3](0)\n  5: Parameter[4](0)\n  6: Parameter[5](0)\n  8: Int64Constant[15]\n  9: Load[kRepTagged|kTypeAny](1, 8)\n  10: Int64Constant[1]\n  11: Word64And(2, 10)\n  12: Int64Constant[0]\n  13: Word64Equal(11, 12)\n  14: Branch[None](13) -> B6, B1\n--- BLOCK B1 <- B0 ---\n  15: Int64Constant[-1]\n  16: Load[kRepTagged|kTypeAny](2, 15)\n  17: HeapConstant[0x37f0727024d1 <Map(HOLEY_ELEMENTS)>]\n  18: Word64Equal(16, 17)\n  19: Branch[None](18) -> B3, B2\n--- BLOCK B2 <- B1 ---\n  Goto -> B21\n--- BLOCK B3 <- B1 ---\n  20: Int64Constant[7]\n  21: Load[kRepFloat64|kTypeNumber](2, 20)\n  22: RoundFloat64ToInt32(21)\n  23: ChangeInt32ToFloat64(22)\n  24: Float64Equal(21, 23)\n  25: Branch[None](24) -> B5, B4\n--- BLOCK B4 <- B3 ---\n  Goto -> B21\n--- BLOCK B5 <- B3 ---\n  26: ChangeInt32ToInt64(22)\n  Goto -> B7\n--- BLOCK B6 <- B0 ---\n  27: Int64Constant[32]\n  28: Word64Sar(2, 27)\n  Goto -> B7\n--- BLOCK B7 <- B5, B6 ---\n  29: Phi[kRepWord64](26, 28, 0)\n  30: Int64Constant[1]\n  31: Word64And(3, 30)\n  32: Int64Constant[0]\n  33: Word64Equal(31, 32)\n  34: Branch[None](33) -> B14, B8\n--- BLOCK B8 <- B7 ---\n  35: Int64Constant[-1]\n  36: Load[kRepTagged|kTypeAny](3, 35)\n  37: HeapConstant[0x37f0727024d1 <Map(HOLEY_ELEMENTS)>]\n  38: Word64Equal(36, 37)\n  39: Branch[None](38) -> B12, B9\n--- BLOCK B9 <- B8 ---\n  40: Int64Constant[-1]\n  41: Load[kRepTagged|kTypeAny](3, 40)\n  42: Int64Constant[11]\n  43: Load[kRepWord8|kTypeUint32](41, 42)\n  44: Int32Constant[131]\n  45: Word32Equal(43, 44)\n  46: Branch[None](45) -> B11, B10\n--- BLOCK B10 <- B9 ---\n  Goto -> B21\n--- BLOCK B11 <- B9 ---\n  Goto -> B13\n--- BLOCK B12 <- B8 ---\n  Goto -> B13\n--- BLOCK B13 <- B12, B11 ---\n  47: Int64Constant[7]\n  48: Load[kRepFloat64|kTypeNumber](3, 47)\n  Goto -> B15\n--- BLOCK B14 <- B7 ---\n  49: Int64Constant[32]\n  50: Word64Sar(3, 49)\n  51: TruncateInt64ToInt32(50)\n  52: ChangeInt32ToFloat64(51)\n  Goto -> B15\n--- BLOCK B15 <- B13, B14 ---\n  53: Phi[kRepFloat64](48, 52, 0)\n  54: Int64Constant[23]\n  55: Load[kRepTagged|kTypeAny](1, 54)\n  56: Int64Constant[55]\n  57: Load[kRepWord32|kTypeUint32](55, 56)\n  58: Int32Constant[8]\n  59: Word32And(57, 58)\n  60: Int32Constant[0]\n  61: Word32Equal(59, 60)\n  62: Int32Constant[0]\n  63: Word32Equal(61, 62)\n  64: Branch[None](63) -> B20, B16\n--- BLOCK B16 <- B15 ---\n  65: Int64Constant[47]\n  66: Load[kRepTagged|kTypeAny](1, 65)\n  67: Int64Constant[32]\n  68: Word64Sar(66, 67)\n  69: Uint64LessThan(29, 68)\n  70: Branch[None](69) -> B18, B17\n--- BLOCK B17 <- B16 ---\n  Goto -> B21\n--- BLOCK B18 <- B16 ---\n  71: Int64Constant[23]\n  72: Load[kRepWord64](9, 71)\n  73: Int64Constant[15]\n  74: Load[kRepTagged|kTypeAny](9, 73)\n  75: Int64Add(72, 74)\n  76: Int64Constant[3]\n  77: Word64Shl(29, 76)\n  78: Int64Constant[0]\n  79: Store[(kRepFloat64 : NoWriteBarrier)](75, 77, 53)\n  Goto -> B19\n--- BLOCK B19 <- B18 ---\n  80: Int32Constant[0]\n  81: Return(80, 3) -> B22\n--- BLOCK B20 <- B15 ---\n  Goto -> B21\n--- BLOCK B21 <- B2, B4, B10, B20, B17 ---\n  82: HeapConstant[0x37cae61845e1 <Code STUB>]\n  83: ExternalConstant[0x557bb0324720<KeyedStoreIC_Miss.entry>]\n  84: Int32Constant[5]\n  85: TailCall[Code:KeyedStoreIC_Miss:r1s5i9f0t1](82, 3, 4, 5, 1, 2, 83, 84, 6) -> B22\n--- BLOCK B22 <- B19, B21 ---\n"},
{"name":"disassembly","type":"disassembly","data":"kind = STUB\nmajor_key = <NoCache>Stub\ncompiler = turbofan\nInstructions (size = 228)\n0x37cae6284480     0  4c8b420f       REX.W movq r8,[rdx+0xf]\n0x37cae6284484     4  f6c101         testb rcx,0x1\n0x37cae6284487     7  0f8438000000   jz 0x37cae62844c5  <+0x45>\n0x37cae628448d     d  4c8b49ff       REX.W movq r9,[rcx-0x1]\n0x37cae6284491    11  4d394d50       REX.W cmpq [r13+0x50],r9\n0x37cae6284495    15  0f859e000000   jnz 0x37cae6284539  <+0xb9>\n0x37cae628449b    1b  c5fb104107     vmovsd xmm0,[rcx+0x7]\n0x37cae62844a0    20  c57b2cc8       vcvttsd2si r9,xmm0\n0x37cae62844a4    24  c5f157c9       vxorpd xmm1,xmm1,xmm1\n0x37cae62844a8    28  c4c1732ac9     vcvtlsi2sd xmm1,xmm1,r9\n0x37cae62844ad    2d  c5f92ec8       vucomisd xmm1,xmm0\n0x37cae62844b1    31  0f8a82000000   jpe 0x37cae6284539  <+0xb9>\n0x37cae62844b7    37  0f857c000000   jnz 0x37cae6284539  <+0xb9>\n0x37cae62844bd    3d  4d63c9         REX.W movsxlq r9,r9\n0x37cae62844c0    40  e907000000     jmp 0x37cae62844cc  <+0x4c>\n0x37cae62844c5    45  4c8bc9         REX.W movq r9,rcx\n0x37cae62844c8    48  49c1f920       REX.W sarq r9, 32\n0x37cae62844cc    4c  a801           test al,0x1\n0x37cae62844ce    4e  0f8427000000   jz 0x37cae62844fb  <+0x7b>\n0x37cae62844d4    54  4c8b58ff       REX.W movq r11,[rax-0x1]\n0x37cae62844d8    58  4d395d50       REX.W cmpq [r13+0x50],r11\n0x37cae62844dc    5c  0f840f000000   jz 0x37cae62844f1  <+0x71>\n0x37cae62844e2    62  4c8b58ff       REX.W movq r11,[rax-0x1]\n0x37cae62844e6    66  41807b0b83     cmpb [r11+0xb],0x83\n0x37cae62844eb    6b  0f8548000000   jnz 0x37cae6284539  <+0xb9>\n0x37cae62844f1    71  c5fb104007     vmovsd xmm0,[rax+0x7]\n0x37cae62844f6    76  e910000000     jmp 0x37cae628450b  <+0x8b>\n0x37cae62844fb    7b  4c8bd8         REX.W movq r11,rax\n0x37cae62844fe    7e  49c1eb20       REX.W shrq r11, 32\n0x37cae6284502    82  c5f957c0       vxorpd xmm0,xmm0,xmm0\n0x37cae6284506    86  c4c17b2ac3     vcvtlsi2sd xmm0,xmm0,r11\n0x37cae628450b    8b  4c8b5a17       REX.W movq r11,[rdx+0x17]\n0x37cae628450f    8f  41f6433708     testb [r11+0x37],0x8\n0x37cae6284514    94  0f851f000000   jnz 0x37cae6284539  <+0xb9>\n0x37cae628451a    9a  4c635a33       REX.W movsxlq r11,[rdx+0x33]\n0x37cae628451e    9e  4d3bcb         REX.W cmpq r9,r11\n0x37cae6284521    a1  0f8312000000   jnc 0x37cae6284539  <+0xb9>\n0x37cae6284527    a7  498b5817       REX.W movq rbx,[r8+0x17]\n0x37cae628452b    ab  498b500f       REX.W movq rdx,[r8+0xf]\n0x37cae628452f    af  4803da         REX.W addq rbx,rdx\n0x37cae6284532    b2  c4a17b1104cb   vmovsd [rbx+r9*8],xmm0\n0x37cae6284538    b8  c3             retl\n0x37cae6284539    b9  57             push rdi\n0x37cae628453a    ba  53             push rbx\n0x37cae628453b    bb  52             push rdx\n0x37cae628453c    bc  51             push rcx\n0x37cae628453d    bd  ff742420       push [rsp+0x20]\n0x37cae6284541    c1  4889442428     REX.W movq [rsp+0x28],rax\n0x37cae6284546    c6  b805000000     movl rax,0x5\n0x37cae628454b    cb  48bb204732b07b550000 REX.W movq rbx,0x557bb0324720\n0x37cae6284555    d5  e9e600f0ff     jmp 0x37cae6184640      ;; code: STUB, CEntryStub, minor: 8\n0x37cae628455a    da  90             nop\n0x37cae628455b    db  90             nop\n\n\nSafepoints (size = 8)\n\nRelocInfo (size = 3)\n0x37cae6284556  code target (STUB)  (0x37cae6184640)\n\n"}
],
"nodePositions":{}}