#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template masochistic_snake
import time
from pwn import *
from subprocess import check_output

# Set up pwntools for the correct architecture
exe = context.binary = ELF('masochistic_snake')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    p = remote('localhost', 4000)
    pid = int(check_output(['pidof', './masochistic_snake']))
    gdb.attach(pid, gdbscript=gdbscript)

    return p

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
source script.py
b *0x555555555778
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

io.send('Ad')
i = 0
time.sleep(1)
io.send('d')


io.interactive()

